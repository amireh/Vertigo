// bump map vertex program, support for this is required
 vertex_program Examples/BumpMapVP cg
 {
     source Example_BumpMapping.cg
     entry_point main_vp
     profiles vs_1_1 arbvp1
 }
 
 // bump map fragment program, support for this is optional
 fragment_program Examples/BumpMapFP cg
 {
     source Example_BumpMapping.cg
     entry_point main_fp
     profiles ps_1_1 arbfp1 fp20
 } 
 
 // bump map with specular vertex program, support for this is required
 vertex_program Examples/BumpMapVPSpecular cg
 {
     source Example_BumpMapping.cg
     entry_point specular_vp
     profiles vs_1_1 arbvp1
 }
 
 // bump map fragment program, support for this is optional
 fragment_program Examples/BumpMapFPSpecular cg
 {
     source Example_BumpMapping.cg
     entry_point specular_fp
     profiles ps_1_1 arbfp1 fp20
 }
 
 material Sphere/Ice
 { 
 
     // this is the preferred technique which uses both vertex and
     // fragment programs and supports coloured lights
     technique
     {
         // base ambient pass
         pass
         {
             // base colours, not needed for rendering, but as information
             // to lighting pass categorisation routine
 
             ambient 1 1 1
             diffuse 0 0 0 
             specular 0 0 0 0 
 
             // really basic vertex program
             // NB we don't use fixed functions here because GL does not like
             // mixing fixed functions and vertex programs (depth fighting can
             // be an issue)
             vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
             {
                 param_named_auto worldViewProj worldviewproj_matrix
                 param_named_auto ambient ambient_light_colour
             }
 
         }
         // wow do the lighting pass
         // NB we don't do decal texture here because this is repeated per light
         pass
         {
             // base colours, not needed for rendering, but as information
             // to lighting pass categorisation routine
             ambient 0 0 0 
 
             // do this for each light
             iteration once_per_light
 
             scene_blend add
 
             // vertex program reference
             vertex_program_ref Examples/BumpMapVP
             {
                 param_named_auto lightPosition light_position_object_space 0
                 param_named_auto worldViewProj worldviewproj_matrix
             }
 
             // fragment program
             fragment_program_ref Examples/BumpMapFP
             {
                 param_named_auto lightDiffuse light_diffuse_colour 0 
             }
 
             // base bump map
             texture_unit
             {
                 texture IcyNM.jpg
                 colour_op replace
             }
 
             // normalisation cube map
             texture_unit
             {
                 cubic_texture nm.png combinedUVW
                 tex_coord_set 1
                 tex_address_mode clamp
             }
         }
 
         // decal pass
         pass
         {
             // base colours, not needed for rendering, but as information
             // to lighting pass categorisation routine
 
             lighting off
 
             // really basic vertex program
             // NB we don't use fixed function here because GL does not like
             // mixing fixed function and vertex programs (depth fighting can
             // be an issue)
 
             vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
             {
                 param_named_auto worldViewProj worldviewproj_matrix
                 param_named ambient float4 1 1 1 1
             }
 
             scene_blend dest_colour zero
 
             texture_unit
             {
                 texture Icy.png 
             }

 
         }
     }
 
     // this is the fallback which cards which don't have fragment program 
     // support will use
     // Note: this still requires vertex program support
     technique
     {
         // base ambient pass
         pass
         {
             // base colours, not needed for rendering, but as information
             // to lighting pass categorisation routine
 
             ambient 1 1 1
             diffuse 0 0 0 
             specular 0 0 0 0
 
             // really basic vertex program
             // NB we don't use fixed function here because GL does not like
             // mixing fixed function and vertex programs (depth fighting can
             // be an issue)
 
             vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
             {
                 param_named_auto worldViewProj worldviewproj_matrix
                 param_named_auto ambient ambient_light_colour
             }
 
         }
         // now do the lighting pass
         // NB we don't do decal texture here because this is repeated per light
         pass
         {
             // base colours, not needed for rendering, but as information
             // to lighting pass categorisation routine
 
             ambient 0 0 0 
 
             // do this for each light
             iteration once_per_light
 
 
             scene_blend add
 
             // vertex program reference
             vertex_program_ref Examples/BumpMapVP
             {
                 param_named_auto lightPosition light_position_object_space 0
                 param_named_auto worldViewProj worldviewproj_matrix
             }
 
             // base bump map
             texture_unit
             {
                 texture IcyNM.jpg
                 colour_op replace
             }
 
             // normalisation cube map, with dot product on bump map
             texture_unit
             {
                 cubic_texture nm.png combinedUVW
                 tex_coord_set 1
                 tex_address_mode clamp
                 colour_op_ex dotproduct src_texture src_current
                 colour_op_multipass_fallback dest_colour zero
             }
         }
 
         // decal pass
         pass
         {
             lighting off
 
             // really basic vertex program
             // NB we don't use fixed function here because GL does not like
             // mixing fixed function and vertex programs, depth fighting can
             // be an issue
 
             vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
             {
                 param_named_auto worldViewProj worldviewproj_matrix
                 param_named ambient float4 1 1 1 1
             }
             scene_blend dest_colour zero
             texture_unit
             {
                 texture Icy.png 
             }

         }
 
     }
 }
 
 material Sphere/Fire
 { 
 
     // this is the preferred technique which uses both vertex and
     // fragment programs and supports coloured lights
     technique
     {
         // base ambient pass
         pass
         {
             // base colours, not needed for rendering, but as information
             // to lighting pass categorisation routine
 
             ambient 1 1 1
             diffuse 0 0 0 
             specular 0 0 0 0 
 
             // really basic vertex program
             // NB we don't use fixed functions here because GL does not like
             // mixing fixed functions and vertex programs (depth fighting can
             // be an issue)
             vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
             {
                 param_named_auto worldViewProj worldviewproj_matrix
                 param_named_auto ambient ambient_light_colour
             }
 
         }
         // wow do the lighting pass
         // NB we don't do decal texture here because this is repeated per light
         pass
         {
             // base colours, not needed for rendering, but as information
             // to lighting pass categorisation routine
             ambient 0 0 0 
 
             // do this for each light
             iteration once_per_light
 
             scene_blend add
 
             // vertex program reference
             vertex_program_ref Examples/BumpMapVP
             {
                 param_named_auto lightPosition light_position_object_space 0
                 param_named_auto worldViewProj worldviewproj_matrix
             }
 
             // fragment program
             fragment_program_ref Examples/BumpMapFP
             {
                 param_named_auto lightDiffuse light_diffuse_colour 0 
             }
 
             // base bump map
             texture_unit
             {
                 texture FireNM.jpg
                 colour_op replace
             }
 
             // normalisation cube map
             texture_unit
             {
                 cubic_texture nm.png combinedUVW
                 tex_coord_set 1
                 tex_address_mode clamp
             }
         }
 
         // decal pass
         pass
         {
             // base colours, not needed for rendering, but as information
             // to lighting pass categorisation routine
 
             lighting off
 
             // really basic vertex program
             // NB we don't use fixed function here because GL does not like
             // mixing fixed function and vertex programs (depth fighting can
             // be an issue)
 
             vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
             {
                 param_named_auto worldViewProj worldviewproj_matrix
                 param_named ambient float4 1 1 1 1
             }
 
             scene_blend dest_colour zero
 
             texture_unit
             {
                 texture Fire.jpg 
             }

 
         }
     }
 
     // this is the fallback which cards which don't have fragment program 
     // support will use
     // Note: this still requires vertex program support
     technique
     {
         // base ambient pass
         pass
         {
             // base colours, not needed for rendering, but as information
             // to lighting pass categorisation routine
 
             ambient 1 1 1
             diffuse 0 0 0 
             specular 0 0 0 0
 
             // really basic vertex program
             // NB we don't use fixed function here because GL does not like
             // mixing fixed function and vertex programs (depth fighting can
             // be an issue)
 
             vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
             {
                 param_named_auto worldViewProj worldviewproj_matrix
                 param_named_auto ambient ambient_light_colour
             }
 
         }
         // now do the lighting pass
         // NB we don't do decal texture here because this is repeated per light
         pass
         {
             // base colours, not needed for rendering, but as information
             // to lighting pass categorisation routine
 
             ambient 0 0 0 
 
             // do this for each light
             iteration once_per_light
 
 
             scene_blend add
 
             // vertex program reference
             vertex_program_ref Examples/BumpMapVP
             {
                 param_named_auto lightPosition light_position_object_space 0
                 param_named_auto worldViewProj worldviewproj_matrix
             }
 
             // base bump map
             texture_unit
             {
                 texture FireNM.jpg
                 colour_op replace
             }
 
             // normalisation cube map, with dot product on bump map
             texture_unit
             {
                 cubic_texture nm.png combinedUVW
                 tex_coord_set 1
                 tex_address_mode clamp
                 colour_op_ex dotproduct src_texture src_current
                 colour_op_multipass_fallback dest_colour zero
             }
         }
 
         // decal pass
         pass
         {
             lighting off
 
             // really basic vertex program
             // NB we don't use fixed function here because GL does not like
             // mixing fixed function and vertex programs, depth fighting can
             // be an issue
 
             vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
             {
                 param_named_auto worldViewProj worldviewproj_matrix
                 param_named ambient float4 1 1 1 1
             }
             scene_blend dest_colour zero
             texture_unit
             {
                 texture Fire.jpg 
             }
 
         }
 
     }
 }
 
 material BumpMapping/Terrain
{
	technique
	{
		pass
		{
			ambient 1 1 1
			scene_blend zero
			//depth_write off
			cull_software none
			cull_hardware none

			texture_unit
			{
				texture Lava_Cracks.jpg
				scroll_anim 0.425 0
			}

			texture_unit
			{
				texture Lava_Cracks.jpg
				wave_xform scroll_y sine 0 0.1 0 0.25
			}
		}
	}
}
  material BumpMapping/Terrainz
 { 
 
     // this is the preferred technique which uses both vertex and
     // fragment programs and supports coloured lights
     technique
     {
         // base ambient pass
         pass
         {
             // base colours, not needed for rendering, but as information
             // to lighting pass categorisation routine
 
             ambient 1 1 1
             diffuse 0 0 0 
             specular 0 0 0 0 
 
             // really basic vertex program
             // NB we don't use fixed functions here because GL does not like
             // mixing fixed functions and vertex programs (depth fighting can
             // be an issue)
             vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
             {
                 param_named_auto worldViewProj worldviewproj_matrix
                 param_named_auto ambient ambient_light_colour
             }
 
         }
         // wow do the lighting pass
         // NB we don't do decal texture here because this is repeated per light
         pass
         {
             // base colours, not needed for rendering, but as information
             // to lighting pass categorisation routine
             ambient 0 0 0 
 
             // do this for each light
             iteration once_per_light
 
             scene_blend add
 
             // vertex program reference
             vertex_program_ref Examples/BumpMapVP
             {
                 param_named_auto lightPosition light_position_object_space 0
                 param_named_auto worldViewProj worldviewproj_matrix
             }
 
             // fragment program
             fragment_program_ref Examples/BumpMapFP
             {
                 param_named_auto lightDiffuse light_diffuse_colour 0 
             }
 
             // base bump map
             texture_unit
             {
                 texture Searing_Gorge1024NM1.jpg
                 colour_op replace
             }
 
             // normalisation cube map
             texture_unit
             {
                 cubic_texture nm.png combinedUVW
                 tex_coord_set 1
                 tex_address_mode clamp
             }
         }
 
         // decal pass
         pass
         {
             // base colours, not needed for rendering, but as information
             // to lighting pass categorisation routine
 
             lighting off
 
             // really basic vertex program
             // NB we don't use fixed function here because GL does not like
             // mixing fixed function and vertex programs (depth fighting can
             // be an issue)
 
             vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
             {
                 param_named_auto worldViewProj worldviewproj_matrix
                 param_named ambient float4 1 1 1 1
             }
 
             scene_blend dest_colour zero
 
             texture_unit
             {
                 texture Searing_Gorge1024.jpg 
             }

 
         }
         
         pass
        {
          scene_blend alpha_blend
          vertex_program_ref ET/Programs/VSFog
          {
          }
        }
     }
 
     // this is the fallback which cards which don't have fragment program 
     // support will use
     // Note: this still requires vertex program support
     technique
     {
         // base ambient pass
         pass
         {
             // base colours, not needed for rendering, but as information
             // to lighting pass categorisation routine
 
             ambient 1 1 1
             diffuse 0 0 0 
             specular 0 0 0 0
 
             // really basic vertex program
             // NB we don't use fixed function here because GL does not like
             // mixing fixed function and vertex programs (depth fighting can
             // be an issue)
 
             vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
             {
                 param_named_auto worldViewProj worldviewproj_matrix
                 param_named_auto ambient ambient_light_colour
             }
 
         }
         // now do the lighting pass
         // NB we don't do decal texture here because this is repeated per light
         pass
         {
             // base colours, not needed for rendering, but as information
             // to lighting pass categorisation routine
 
             ambient 0 0 0 
 
             // do this for each light
             iteration once_per_light
 
 
             scene_blend add
 
             // vertex program reference
             vertex_program_ref Examples/BumpMapVP
             {
                 param_named_auto lightPosition light_position_object_space 0
                 param_named_auto worldViewProj worldviewproj_matrix
             }
 
             // base bump map
             texture_unit
             {
                 texture Searing_Gorge1024NM1.jpg
                 colour_op replace
             }
 
             // normalisation cube map, with dot product on bump map
             texture_unit
             {
                 cubic_texture nm.png combinedUVW
                 tex_coord_set 1
                 tex_address_mode clamp
                 colour_op_ex dotproduct src_texture src_current
                 colour_op_multipass_fallback dest_colour zero
             }
         }
 
         // decal pass
         pass
         {
             lighting off
 
             // really basic vertex program
             // NB we don't use fixed function here because GL does not like
             // mixing fixed function and vertex programs, depth fighting can
             // be an issue
 
             vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
             {
                 param_named_auto worldViewProj worldviewproj_matrix
                 param_named ambient float4 1 1 1 1
             }
             scene_blend dest_colour zero
             texture_unit
             {
                 texture Searing_Gorge1024.jpg 
             }
 
         }
 

     }
 }
// Any number of lights, diffuse and specular
material Examples/BumpMapping/MultiLightSpecular : Sphere/Ice
{

	// This is the preferred technique which uses both vertex and
	// fragment programs, supports coloured lights
	technique
	{
		// Overlay nothing new onto the old ambient pass
		pass ambient
		{
		}
		// Now do the lighting pass
		// NB we don't do decal texture here because this is repeated per light
		pass perlight
		{

			// Vertex program reference
			vertex_program_ref Examples/BumpMapVPSpecular
			{
				param_named_auto lightPosition light_position_object_space 0
				param_named_auto eyePosition camera_position_object_space
				param_named_auto worldViewProj worldviewproj_matrix
			}

			// Fragment program
			fragment_program_ref Examples/BumpMapFPSpecular
			{
				param_named_auto lightDiffuse light_diffuse_colour 0 
				param_named_auto lightSpecular light_specular_colour 0
			}
			
		}
		
	}

}

